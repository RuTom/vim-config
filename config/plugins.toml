# PLUGINS
# ===
# See config/plugins/all.vim for plugin mappings and config/plugins/*.vim

# Perm Loading {{{1
# ==============
[[plugins]]
repo = "Shougo/dein.vim"
trusted = 1

# Statusline providers {{{2
[[plugins]]
repo = "itchyny/vim-gitbranch"

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "pacha/vem-tabline"
hook_add = '''
let g:vem_tabline_show = 2
let g:vem_tabline_show_number = 'buffnr'
let g:vem_tabline_number_symbol = ': '
let g:vem_tabline_left_arrow = '◀'
let g:vem_tabline_right_arrow = '▶'
'''

# Textobjects {{{2
[[plugins]]
repo = "itchyny/vim-parenmatch"

[[plugins]]
repo = "wellle/targets.vim"
merged = 0

# Automatic configuration {{{2
[[plugins]]
repo = "thinca/vim-localrc"

[[plugins]]
repo = "sgur/vim-editorconfig"

[[plugins]]
repo = "tpope/vim-sleuth"
hook_add = "let g:sleuth_neighbor_limit = 5"

[[plugins]]
repo = "Shougo/context_filetype.vim"

# Filemanager integration {{{2
[[plugins]]
repo = "justinmk/vim-gtfo"

# Interface {{{2
[[plugins]]
repo = "romainl/vim-cool"

[[plugins]]
repo = "wellle/visual-split.vim"
merged = 0

[[plugins]]
repo = "christoomey/vim-tmux-navigator"
if = "! (has('win32') || has('win64'))"
hook_add = "let g:tmux_navigator_no_mappings = 1"

# Colorschemes {{{2
[[plugins]]
repo = "rafi/awesome-vim-colorschemes"
merged = 0
trusted = 1

# Clap {{{2
[[plugins]]
repo = "liuchengxu/vim-clap"
merged = 0
hook_add = '''
let g:clap_cache_directory = $DATA_PATH . '/clap'
let g:clap_theme = 'material_design_dark'
let g:clap_layout = { 'relative': 'editor' }
let g:clap_enable_icon = 1
let g:clap_search_box_border_style = 'curve'
let g:clap_provider_grep_enable_icon = 1
let g:clap_prompt_format = '%spinner%%forerunner_status% %provider_id%: '
highlight! link ClapMatches Function
highlight! link ClapNoMatchesFound WarningMsg
'''

# Vim/Neovim Compat {{{2
[[plugins]]
repo = "equalsraf/neovim-gui-shim"
if = "has('gui_running')"

[[plugins]]
repo = "roxma/nvim-yarp"
if = "! has('nvim')"
depends = "vim-hug-neovim-rpc"

[[plugins]]
repo = "roxma/vim-hug-neovim-rpc"
if = "! has('nvim')"

# }}}

# Lazy Loading {{{1
# ============

# Languages {{{2
# ---------
# Latex related {{{3
[[plugins]]
repo = "lervag/vimtex"
on_ft = ["tex", "bib"]
hook_add = "source $VIM_PATH/config/plugins/vimtex.vim"
merged = 0

# Markdown related {{{3
[[plugins]]
repo = "plasticboy/vim-markdown"
on_ft = "markdown"
hook_add = '''
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_override_foldtext = 1
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_edit_url_in = 'vsplit'
let g:vim_markdown_auto_insert_bullets = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_toc_autofit = 0
let g:vim_markdown_fenced_languages = [
  \ 'c++=cpp',
  \ 'viml=vim',
  \ 'bash=sh',
  \ 'ini=dosini',
  \ 'js=javascript',
  \ 'json=javascript',
  \ 'jsx=javascriptreact',
  \ 'tsx=typescriptreact',
  \ 'docker=Dockerfile',
  \ 'makefile=make',
  \ 'py=python'
  \ ]
'''

[[plugins]]
repo = "rhysd/vim-gfm-syntax"
depends = "vim-markdown"
on_ft = "markdown"
hook_add = '''
let g:gfm_syntax_enable_always = 0
let g:gfm_syntax_highlight_emoji = 0
let g:gfm_syntax_enable_filetypes = ['markdown']
'''

# Javascript related {{{3
[[plugins]]
repo = "pangloss/vim-javascript"
on_ft = ["javascript", "javascriptreact"]
hook_add = '''
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = "HerringtonDarkholme/yats.vim"
on_ft = ["typescript", "typescriptreact"]

[[plugins]]
repo = "MaxMEllon/vim-jsx-pretty"
depends = "vim-javascript"
on_ft = ["javascript", "javascriptreact", "typescriptreact"]
hook_add = "let g:vim_jsx_pretty_colorful_config = 1"

[[plugins]]
repo = "heavenshell/vim-jsdoc"
on_ft = ["javascript", "javascriptreact"]

[[plugins]]
repo = "jparise/vim-graphql"
on_ft = ["javascript", "javascriptreact"]

[[plugins]]
repo = "moll/vim-node"
on_ft = ["javascript", "javascriptreact"]

[[plugins]]
repo = "kchmck/vim-coffee-script"
on_ft = ["coffee", "litcoffee"]

[[plugins]]
repo = "elzr/vim-json"
on_ft = "json"

[[plugins]]
repo = "posva/vim-vue"
on_ft = "vue"

# Golang related {{{3
[[plugins]]
repo = "fatih/vim-go"
if = "has('nvim-0.3.2') || has('patch-8.0.1453')"
on_ft = ["go", "gomod"]
hook_add = '''
let g:go_gopls_enabled = 0
let g:go_code_completion_enabled = 0
let g:go_doc_keywordprg_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_mod_fmt_autosave = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_chan_whitespace_error = 0
let g:go_highlight_space_tab_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_operators = 1
let g:go_highlight_string_spellcheck = 0
let g:go_highlight_variable_declarations = 0
let g:go_highlight_variable_assignments = 0
'''

# Python related {{{3
[[plugins]]
repo = "vim-python/python-syntax"
on_ft = "python"

[[plugins]]
repo = "Vimjas/vim-python-pep8-indent"
on_ft = "python"

[[plugins]]
repo = "vim-scripts/python_match.vim"
on_ft = "python"

[[plugins]]
repo = "raimon49/requirements.txt.vim"
on_ft = "requirements"

# Misc {{{3
[[plugins]]
repo = "hail2u/vim-css3-syntax"
on_ft = "css"

[[plugins]]
repo = "othree/csscomplete.vim"
on_ft = "css"

[[plugins]]
repo = "cakebaker/scss-syntax.vim"
on_ft = ["scss", "sass"]

[[plugins]]
repo = "groenewege/vim-less"
on_ft = "less"

[[plugins]]
repo = "iloginow/vim-stylus"
on_ft = "stylus"

[[plugins]]
repo = "mustache/vim-mustache-handlebars"
on_ft = ["html", "mustache", "handlebars"]

[[plugins]]
repo = "digitaltoad/vim-pug"
on_ft = ["pug", "jade"]

[[plugins]]
repo = "othree/html5.vim"
on_ft = "html"
hook_add = '''
let g:html5_event_handler_attributes_complete = 0
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0
let g:html5_aria_attributes_complete = 0
'''

[[plugins]]
repo = "StanAngeloff/php.vim"
on_ft = "php"

[[plugins]]
repo = "tbastos/vim-lua"
on_ft = "lua"

[[plugins]]
repo = "vim-ruby/vim-ruby"
on_ft = "ruby"

[[plugins]]
repo = "keith/swift.vim"
on_ft = "swift"

[[plugins]]
repo = "rust-lang/rust.vim"
on_ft = "rust"

[[plugins]]
repo = "vim-jp/syntax-vim-ex"
on_ft = "vim"

[[plugins]]
repo = "chrisbra/csv.vim"
on_ft = "csv"

[[plugins]]
repo = "tpope/vim-git"
on_ft = ["gitcommit", "gitrebase", "gitconfig"]

[[plugins]]
repo = "ekalinin/Dockerfile.vim"
on_ft = ["Dockerfile", "docker-compose"]

[[plugins]]
repo = "tmux-plugins/vim-tmux"
on_ft = "tmux"

[[plugins]]
repo = "MTDL9/vim-log-highlighting"
on_ft = "log"

[[plugins]]
repo = "cespare/vim-toml"
on_ft = "toml"

[[plugins]]
repo = "mboughaba/i3config.vim"
on_ft = "i3config"

[[plugins]]
repo = "dag/vim-fish"
on_ft = "fish"

[[plugins]]
repo = "jstrater/mpvim"
on_ft = "portfile"

[[plugins]]
repo = "robbles/logstash.vim"
on_ft = "logstash"

[[plugins]]
repo = "lifepillar/pgsql.vim"
on_ft = "pgsql"

[[plugins]]
repo = "chr4/nginx.vim"
on_ft = "nginx"

[[plugins]]
repo = "IN3D/vim-raml"
on_ft = "raml"

[[plugins]]
repo = "towolf/vim-helm"
on_ft = "helm"

[[plugins]]
repo = "pearofducks/ansible-vim"
on_ft = ["ansible", "ansible_hosts", "jinja2"]
hook_add = '''
let g:ansible_extra_keywords_highlight = 1
let g:ansible_template_syntaxes = {
  \   '*.json.j2': 'json',
  \   '*.(ba)?sh.j2': 'sh',
  \   '*.ya?ml.j2': 'yaml',
  \   '*.xml.j2': 'xml',
  \   '*.conf.j2': 'conf',
  \   '*.ini.j2': 'ini'
  \ }
'''

[[plugins]]
repo = "hashivim/vim-terraform"
on_ft = "terraform"
on_cmd = ["Terraform", "TerraformFmt"]

# Commands {{{2
# --------

[[plugins]]
repo = "Shougo/defx.nvim"
hook_source = "source $VIM_PATH/config/plugins/defx.vim"
on_cmd = "Defx"

[[plugins]]
repo = "kristijanhusak/defx-git"
on_source = "defx.nvim"

[[plugins]]
repo = "kristijanhusak/defx-icons"
on_source = "defx.nvim"

[[plugins]]
repo = "tyru/caw.vim"
on_map = '{"nx": "<Plug>"}'

[[plugins]]
repo = "liuchengxu/vim-which-key"
on_cmd = "WhichKey"

[[plugins]]
repo = "mbbill/undotree"
on_cmd = "UndotreeToggle"

[[plugins]]
repo = "reedes/vim-wordy"
on_cmd = ["Wordy", "NextWordy", "PrevWordy"]

[[plugins]]
repo = "brooth/far.vim"
on_cmd = ["Far", "Farp", "F"]

[[plugins]]
repo = "jreybert/vimagit"
on_cmd = "Magit"

[[plugins]]
repo = "tweekmonster/helpful.vim"
on_cmd = "HelpfulVersion"

[[plugins]]
repo = "lambdalisue/gina.vim"
on_cmd = "Gina"

[[plugins]]
repo = "kana/vim-altr"
on_map = '{"n": "<Plug>"}'

[[plugins]]
repo = "Shougo/vinarise.vim"
on_cmd = "Vinarise"

[[plugins]]
repo = "guns/xterm-color-table.vim"
on_cmd = "XtermColorTable"

[[plugins]]
repo = "cocopon/colorswatch.vim"
on_cmd = "ColorSwatchGenerate"

[[plugins]]
repo = "dstein64/vim-startuptime"
on_cmd = "StartupTime"

[[plugins]]
repo = "Vigemus/iron.nvim"
if = "has('nvim')"
on_cmd = ["IronRepl", "IronReplHere", "IronFocus", "IronSend", "IronWatchCurrentFile"]
on_func = "IronUnwatchFile"
on_map = '{"nv": "<Plug>"}'
hook_source = "luafile $VIM_PATH/config/plugins/iron.lua"
hook_add = '''
let g:iron_map_defaults = 0
let g:iron_map_extended = 0
'''

[[plugins]]
repo = "kana/vim-niceblock"
on_map = '{"x": "<Plug>"}'

[[plugins]]
repo = "t9md/vim-choosewin"
on_map = '{"n": "<Plug>"}'
hook_add = '''
let g:choosewin_label = 'ADFGHJKLUIOPQWERT'
let g:choosewin_label_align = 'right'
let g:choosewin_label_padding = 5
'''

[[plugins]]
repo = "lambdalisue/suda.vim"
on_event = "BufRead"
hook_add = "let g:suda_smart_edit = 1"

[[plugins]]
repo = "mzlogin/vim-markdown-toc"
on_cmd = ["GenTocGFM", "GenTocRedcarpet", "GenTocGitLab", "UpdateToc"]
hook_add = "let g:vmt_auto_update_on_save = 0"

[[plugins]]
repo = "tpope/vim-fugitive"
on_cmd = ["G", "Git", "Gfetch", "Gpush", "Glog", "Gclog", "Gdiffsplit"]
hook_source = "augroup user_fugitive_plugin autocmd! autocmd FileType fugitiveblame normal A augroup END"

[[plugins]]
repo = "junegunn/gv.vim"
depends = "vim-fugitive"
on_cmd = "GV"

[[plugins]]
repo = "liuchengxu/vista.vim"
on_cmd = "Vista"
hook_add = '''
let g:vista#renderer#enable_icon = 1
let g:vista_echo_cursor_strategy = 'scroll'
let g:vista_vimwiki_executive = 'markdown'
let g:vista_executive_for = {
  \ 'vimwiki': 'markdown',
  \ 'pandoc': 'markdown',
  \ 'markdown': 'toc',
  \ }
'''

[[plugins]]
repo = "junegunn/fzf"
merged = 0
on_cmd = "FZF"
type__depth = 1
hook_source = "let g:fzf_layout = { 'down': '~25%' }"

[[plugins]]
repo = "junegunn/fzf.vim"
merged = 0
depends = "fzf"
on_func = ["fzf#vim#with_preview", "fzf#run", "vista#finder#fzf#Run"]
on_cmd = ["Files", "GitFiles", "Buffers", "Lines", "Locate", "Colors", "Ag", "Rg", "Tags"]

# Interface {{{2
# ---------
[[plugins]]
repo = "haya14busa/vim-asterisk"
on_map = '{"nv": "<Plug>"}'

[[plugins]]
repo = "haya14busa/vim-edgemotion"
on_map = '{"nv": "<Plug>"}'

[[plugins]]
repo = "t9md/vim-quickhl"
on_map = '{"nv": "<Plug>"}'

[[plugins]]
repo = "hotwatermorning/auto-git-diff"
on_ft = "gitrebase"

[[plugins]]
repo = "rafi/vim-sidemenu"
on_map = '{"nv": "<Plug>"}'

[[plugins]]
repo = "machakann/vim-highlightedyank"
on_event = "TextYankPost"
hook_source = "let g:highlightedyank_highlight_duration = 200"

[[plugins]]
repo = "wellle/context.vim"
on_cmd = ["ContextToggle", "ContextToggleWindow", "ContextPeek"]

[[plugins]]
repo = "itchyny/vim-cursorword"
on_event = "FileType"
hook_source = '''
augroup user_plugin_cursorword
  autocmd!
  autocmd FileType defx,denite,qf let b:cursorword = 0
  autocmd WinEnter * if &diff | let b:cursorword = 0 | endif
  autocmd InsertEnter * let b:cursorword = 0
  autocmd InsertLeave * let b:cursorword = 1
augroup END
'''

[[plugins]]
repo = "norcalli/nvim-colorizer.lua"
if = "has('nvim-0.4')"
on_event = "FileType"
hook_source = "luafile $VIM_PATH/config/plugins/colorizer.lua"

[[plugins]]
repo = "airblade/vim-gitgutter"
on_event = "FileType"
hook_add = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_sign_added = '▎'
let g:gitgutter_sign_modified = '▎'
let g:gitgutter_sign_removed = '▍'
let g:gitgutter_sign_removed_first_line = '▘'
let g:gitgutter_sign_modified_removed = '▍'
let g:gitgutter_preview_win_floating = 1
let g:gitgutter_sign_allow_clobber = 0
let g:gitgutter_sign_priority = 0
let g:gitgutter_override_sign_column_highlight = 0
'''

[[plugins]]
repo = "kshenoy/vim-signature"
depends = "vim-gitgutter"
on_event = "FileType"
hook_add = '''
let g:SignatureForceRemoveGlobal = 0
let g:SignatureUnconditionallyRecycleMarks = 1
let g:SignatureErrorIfNoAvailableMarks = 0
let g:SignaturePurgeConfirmation = 0
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1
let g:SignatureIncludeMarkers = repeat('⚐', 10)
autocmd user_events User GitGutter call signature#sign#Refresh()
'''

[[plugins]]
repo = "nathanaelkane/vim-indent-guides"
on_event = "FileType"
hook_add = '''
let g:indent_guides_default_mapping = 0
let g:indent_guides_tab_guides = 0
let g:indent_guides_color_change_percent = 3
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = [
  \ 'help', 'denite', 'denite-filter', 'startify',
  \ 'vista', 'vista_kind', 'tagbar', 'nerdtree',
  \ 'lsp-hover', 'clap_input'
  \ ]
'''
hook_post_source = "IndentGuidesEnable"

[[plugins]]
repo = "rhysd/committia.vim"
on_path = ["COMMIT_EDITMSG", "MERGE_MSG"]
hook_source = "let g:committia_min_window_width = 70"

[[plugins]]
repo = "junegunn/goyo.vim"
depends = "limelight.vim"
on_cmd = "Goyo"
hook_source = "source $VIM_PATH/config/plugins/goyo.vim"

[[plugins]]
repo = "junegunn/limelight.vim"
on_cmd = "Limelight"

[[plugins]]
repo = "junegunn/vim-easy-align"
on_map = '{"nx": "<Plug>"}'

# Completion and code analysis {{{2
# ----------------------------
[[plugins]]
repo = "prabirshrestha/async.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete.vim"
depends = "async.vim"
hook_add = '''
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_auto_popup = 0
'''
hook_source = "source $VIM_PATH/config/plugins/asyncomplete.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete-lsp.vim"
depends = "asyncomplete.vim"

[[plugins]]
repo = "prabirshrestha/vim-lsp"
depends = "asyncomplete-lsp.vim"
hook_add = '''
let g:lsp_diagnostics_enabled = 0
let g:lsp_virtual_text_enabled = 0
'''
hook_source = "source $VIM_PATH/config/plugins/lsp-settings.vim"

[[plugins]]
repo = "mattn/vim-lsp-settings"
depends = "vim-lsp"
merged = 0

[[plugins]]
repo = "Shougo/neco-vim"
on_ft = "vim"
merged = 0

[[plugins]]
repo = "prabirshrestha/asyncomplete-necovim.vim"
depends = "asyncomplete.vim"
hook_source = '''
autocmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#necovim#get_source_options({
  \ 'name': 'necovim',
  \ 'whitelist': ['vim'],
  \ 'completor': function('asyncomplete#sources#necovim#completor'),
  \ }))
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-tags.vim"
depends = "asyncomplete.vim"
if = "executable('ctags')"
hook_source = '''
autocmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#tags#get_source_options({
  \ 'name': 'tags',
  \ 'whitelist': ['*'],
  \ 'blacklist': ['go', 'python', 'vim', 'denite-filter', 'clap_input'],
  \ 'completor': function('asyncomplete#sources#tags#completor'),
  \ 'config': { 'max_file_size': 5000000 },
  \ }))
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-file.vim"
depends = "asyncomplete.vim"
hook_source = '''
autocmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#file#get_source_options({
  \ 'name': 'file',
  \ 'priority': 10,
  \ 'whitelist': ['*'],
  \ 'blacklist': ['denite-filter', 'clap_input'],
  \ 'completor': function('asyncomplete#sources#file#completor')
  \ }))
'''

[[plugins]]
repo = "wellle/tmux-complete.vim"
depends = "asyncomplete.vim"
if = "! (has('win32') || has('win64'))"
hook_add = '''
let g:tmuxcomplete#trigger = ''
let g:tmuxcomplete#asyncomplete_source_options = {
  \ 'name': 'tmux',
  \ 'priority': 0,
  \ 'whitelist': ['*'],
  \ 'blacklist': ['denite-filter', 'clap_input'],
  \ 'config': {
  \   'splitmode': 'words',
  \   'filter_prefix': 1,
  \   'show_incomplete': 1,
  \   'sort_candidates': 0,
  \   'scrollback': 0,
  \   'truncate': 0
  \   }
  \ }
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-ultisnips.vim"
depends = "asyncomplete.vim"
if = "has('python3')"
hook_source = '''
autocmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#ultisnips#get_source_options({
  \ 'name': 'snip',
  \ 'priority': 0,
  \ 'whitelist': ['*'],
  \ 'blacklist': ['denite-filter', 'clap_input'],
  \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
  \ }))
'''

[[plugins]]
repo = "SirVer/ultisnips"
if = "has('python3')"
on_event = "FileType"
hook_add = '''
let g:UltiSnipsExpandTrigger = '<C-l>'
let g:UltiSnipsListSnippets = ''
let g:UltiSnipsJumpForwardTrigger = '<C-f>'
let g:UltiSnipsJumpBackwardTrigger = '<C-b>'
'''

[[plugins]]
repo = "honza/vim-snippets"
depends = "ultisnips"
if = "has('python3')"
on_event = "FileType"
merged = 0

[[plugins]]
repo = "dense-analysis/ale"
on_event = "FileType"
hook_add = '''
let g:ale_disable_lsp = 0
let g:ale_echo_delay = 100
let g:ale_lint_delay = 1000
let g:ale_echo_msg_format = '%linter%: %code: %%s [%severity%]'
let g:ale_history_enabled = 0
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '!'
let g:ale_maximum_file_size = 500000
'''

[[plugins]]
repo = "ncm2/float-preview.nvim"
if = "has('nvim-0.4')"
on_event = "InsertEnter"
hook_source = '''
let g:float_preview#docked = 0
let g:float_preview#max_width = 80
function! s:float_preview()
  call nvim_win_set_option(g:float_preview#win, 'signcolumn', 'no')
endfunction
autocmd user_events User FloatPreviewWinOpen call <SID>float_preview()
'''

[[plugins]]
repo = "ludovicchabant/vim-gutentags"
if = "executable('ctags')"
on_event = ["BufReadPost", "BufWritePost"]
hook_add = '''
let g:gutentags_cache_dir = $DATA_PATH . '/tags'
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_new = 0
let g:gutentags_exclude_project_root = [ '/usr/local' ]
let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
let g:gutentags_ctags_exclude = [
  \ '.idea', '.cache', '.tox', '.bundle', 'build', 'dist',
  \ '*/wp-admin', '*/wp-content', '*/wp-includes',
  \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
  \ ]
'''

[[plugins]]
repo = "Raimondi/delimitMate"
on_event = "FileType"
hook_source = '''
let g:delimitMate_expand_cr = 0
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_excluded_ft = 'mail,txt'
augroup user_plugin_delimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END
'''

# Denite {{{2
# ------
[[plugins]]
repo = "Shougo/denite.nvim"
on_cmd = "Denite"
hook_source = "source $VIM_PATH/config/plugins/denite.vim"
trusted = 1

[[plugins]]
repo = "Shougo/neomru.vim"
on_source = "denite.nvim"
hook_add = '''
let g:neomru#directory_mru_path = $DATA_PATH . '/mru/dir'
let g:neomru#file_mru_path = $DATA_PATH . '/mru/file'
let g:unite_source_file_mru_limit = 5000
'''

[[plugins]]
repo = "Shougo/neoyank.vim"
on_event = "TextYankPost"
on_source = "denite.nvim"

[[plugins]]
repo = "Shougo/junkfile.vim"
on_source = "denite.nvim"

[[plugins]]
repo = "chemzqm/unite-location"
on_source = "denite.nvim"

[[plugins]]
repo = "chemzqm/denite-git"
on_source = "denite.nvim"

[[plugins]]
repo = "rafi/vim-denite-session"
on_source = "denite.nvim"

[[plugins]]
repo = "rafi/vim-denite-z"
on_source = "denite.nvim"
hook_source = '''
command! -nargs=+ -complete=file Z call denite#start(
  \ [{'name': 'z', 'args': [<q-args>], {'immediately': 1}}])
'''

[[plugins]]
repo = 'igrep/denite-mapping'
on_source = 'denite.nvim'

# Operators {{{2
# ---------
[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "kana/vim-operator-replace"
on_map = '{"vnx": "<Plug>"}'

[[plugins]]
repo = "machakann/vim-sandwich"
on_map = '{"vonx": "<Plug>(operator-sandwich-"}'
hook_add = '''
let g:sandwich_no_default_key_mappings = 1
let g:operator_sandwich_no_default_key_mappings = 1
let g:textobj_sandwich_no_default_key_mappings = 1
'''

# Text objects {{{2
# ------------
[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "terryma/vim-expand-region"
on_map = '{"x": "<Plug>"}'

[[plugins]]
repo = "AndrewRadev/sideways.vim"
on_map = '{"onx": "<Plug>Sideways"}'

[[plugins]]
repo = "AndrewRadev/splitjoin.vim"
on_map = '{"n": "<Plug>Splitjoin"}'

[[plugins]]
repo = "AndrewRadev/linediff.vim"
on_cmd = "Linediff"

[[plugins]]
repo = "AndrewRadev/dsf.vim"
on_map = '{"n": "<Plug>Dsf"}'
hook_add = "let g:dsf_no_mappings = 1"

[[plugins]]
repo = "osyo-manga/vim-textobj-multiblock"
on_map = '{"ox": "<Plug>"}'
hook_add = "let g:textobj_multiblock_no_default_key_mappings = 1"

[[plugins]]
repo = "kana/vim-textobj-function"
on_map = '{"ox": "<Plug>"}'
hook_add = "let g:textobj_function_no_default_key_mappings = 1"

# }}}

#  vim: set ts=2 sw=2 tw=80 et fdm=marker ft=toml :
